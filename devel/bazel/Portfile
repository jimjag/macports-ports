# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem                          1.0
PortGroup                 github    1.0
PortGroup                 cxx11     1.1
PortGroup                 java      1.0
PortGroup                 compilers 1.0
PortGroup                 xcodeversion 1.0
PortGroup                 compiler_blacklist_versions 1.0

github.setup              bazelbuild bazel 0.18.0
revision                  2
github.tarball_from       releases
categories                devel
maintainers               {tfmnet.com:mohamed.issa @RootFunction} \
                          {jonesc @cjones051073} \
                          openmaintainer
description               A tool for automating builds and tests.
long_description          ${description}
platforms                 darwin
license                   Apache-2

distname                  ${distname}-dist

checksums                 rmd160  f87bab520c406cc67662c7a4bf9ac588f58dae41 \
                          sha256  d0e86d2f7881ec8742a9823a986017452d2da0dfe4e989111da787cb89257155 \
                          size    86890953

use_zip                   yes
extract.mkdir             yes

use_configure             no

depends_build-append      bin:python:python27 \
                          bin:bash:bash \
                          bin:zip:zip

depends_lib-append        port:cctools

patch.pre_args            -p1

# Minimum required java version
java.version              1.8+

# The oldest Xcode version to use default Xcode compiler
# Note setting here should be in sync with that in py-tensorflow
set bazel_min_xcode 9.0

# Older OS hacks
if {${os.major} < 16} {
    # https://github.com/bazelbuild/bazel/issues/6188
    depends_build-append  port:unzip
}
post-patch {
    if       {[vercmp ${xcodeversion} 7.0] < 0} {
        # Use hacked version that does not find anything.
        # We use MacPorts compiler toolchain anyway so not a problem.
        file copy -force ${filespath}/xcode_locator_fixes/Xcode6-xcode_locator.m ${worksrcpath}/tools/osx/xcode_locator.m
    } elseif {[vercmp ${xcodeversion} 8.0] < 0} {
        # Revert xcode-locator to an older version
        # https://raw.githubusercontent.com/bazelbuild/bazel/7372c04d40d7ab45fa2649c8be002ee6909668d1/tools/osx/xcode_locator.m
        file copy -force ${filespath}/xcode_locator_fixes/Xcode7-xcode_locator.m ${worksrcpath}/tools/osx/xcode_locator.m
    }
}

compiler.blacklist-append {clang < 710}
#compilers.setup           require_fortran
build.env-append  CC=${configure.cc} \
                 CXX=${configure.cxx} \
              TMPDIR=${workpath}/tmp
# Disable Xcode detection on older OSes, as we want the
# MP provided commandline utilities to be used instead.
if {[vercmp ${xcodeversion} ${bazel_min_xcode}] < 0} {
    build.env-append BAZEL_USE_CPP_ONLY_TOOLCHAIN=1
}

build {

    if {[vercmp ${xcodeversion} ${bazel_min_xcode}] < 0} {
        # Patch build files to enforce correct compiler
        foreach f { scripts/bootstrap/compile.sh tools/osx/crosstool/CROSSTOOL.tpl src/test/shell/bazel/testdata/bazel_toolchain_test_data/tools/arm_compiler/CROSSTOOL tools/cpp/unix_cc_configure.bzl tools/cpp/CROSSTOOL third_party/zlib/configure src/test/java/com/google/devtools/build/lib/analysis/mock/MOCK_CROSSTOOL } {
            foreach cmd {ar nm strip libtool ld objdump} {
                reinplace -q "s|/usr/bin/${cmd}|${prefix}/bin/${cmd}|g" ${f}
            }
            reinplace -q "s|/usr/bin/clang|${configure.cc}|g"       ${f}
            reinplace -q "s|\"clang\"|\"${configure.cc}\"|g"        ${f}
            reinplace -q "s| clang | ${configure.cc} |g"            ${f}
            reinplace -q "s|/usr/local/include|${prefix}/include|g" ${f}
        }
    }

    # Build bazel
    system -W ${worksrcpath} "VERBOSE=yes BAZEL_WRKDIR=${workpath} ./compile.sh"

    # Put executable in main working folder
    xinstall -m 755 -W ${worksrcpath}/output ${name} ${worksrcpath}

    # Get ready to build the bash completion script
    file delete -force /var/tmp/_${name}_root

    # Build the bash completion script
    system -W ${worksrcpath} "./${name} --max_idle_secs=60 --output_user_root=${workpath} build -s //scripts:${name}-complete.bash"
}

destroot {
    # Copy compiled binary
    set bindir ${prefix}/bin
    xinstall -d ${destroot}${bindir}
    xinstall -m 755 -W ${worksrcpath}/output ${name} ${destroot}${bindir}

    # Copy bash and zsh completion scripts to designated area for on-demand usage
    set bcompldir ${prefix}/share/bash-completion/completions
    xinstall -d ${destroot}${bcompldir}
    xinstall -m 755 ${worksrcpath}/${name}-bin/scripts/${name}-complete.bash ${destroot}${bcompldir}/${name}
    set zcompldir ${prefix}/share/zsh/site-functions
    xinstall -d ${destroot}${zcompldir}
    xinstall -m 755 ${worksrcpath}/scripts/zsh_completion/_${name} ${destroot}${zcompldir}
}

post-destroot {
    # Mark documentation, source, and example directories
    set docdir ${prefix}/share/doc/${name}
    set srcdir ${prefix}/src/${name}
    set expdir ${prefix}/share/examples/${name}

    # Copy documentation files
    xinstall -d ${destroot}${docdir}
    xinstall -m 644 -W ${worksrcpath} AUTHORS \
                                      CHANGELOG.md \
                                      CONTRIBUTING.md \
                                      CONTRIBUTORS \
                                      ISSUE_TEMPLATE.md \
                                      LICENSE \
                                      README.md \
                       ${destroot}${docdir}

    # Copy source files
    xinstall -d ${destroot}${srcdir}
    file copy -force {*}[glob ${worksrcpath}/src/*] ${destroot}${srcdir}

    # Copy example files
    xinstall -d ${destroot}${expdir}
    file copy -force {*}[glob ${worksrcpath}/examples/*] ${destroot}${expdir}
}

notes "
See http://bazel.build/docs/getting-started.html to start a new project!
"
